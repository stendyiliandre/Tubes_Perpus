package com.advjava.library.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.advjava.library.model.Genre;
import com.advjava.library.repository.GenreRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/library") // This means URL's start with /demo (after Application path)
public class GenreController {
  @Autowired // This means to get the bean called GenreRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private GenreRepository genreRepository;

  @PostMapping(path="/Genre/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<Genre> addNewGenre (@RequestParam String name, @RequestParam double price) {
	try {
    	Genre GenreData = new Genre();
    	GenreData.setName(name);
        genreRepository.save(GenreData);
        return ResponseEntity.ok(GenreData); 
	}catch (Exception e) {
		return ResponseEntity.notFound().build();
	}
  }

  @GetMapping(path="/Genre")
  public @ResponseBody ResponseEntity<Iterable<Genre>> getAllGenres() {
    // This returns a JSON or XML with the Genres
	  try {
			return ResponseEntity.ok(genreRepository.findAll()); 
		}catch (Exception e) {
			return ResponseEntity.notFound().build();
		}
  }

  @GetMapping(path="/Genre/{id}")
  public @ResponseBody ResponseEntity<Genre> getGenre(@PathVariable int id) {
	try {
		Genre GenreData = genreRepository.findById(id).get();
		return ResponseEntity.ok(GenreData); 
	}catch (Exception e) {
		return ResponseEntity.notFound().build();
	}
  }
  
  @PutMapping(path="/Genre/{id}")
  public @ResponseBody ResponseEntity<Genre> updateGenre(@RequestParam String name, @RequestParam double price,
	        @PathVariable int id) {

	  try {
		  Genre GenreData = new Genre();
		  GenreData.setId(id);
		  GenreData.setName(name);
		  genreRepository.save(GenreData);
		  return ResponseEntity.ok(GenreData);
		}catch (Exception e) {
		  return ResponseEntity.notFound().build();
		}
  }
  
  @DeleteMapping(path="/Genre/{id}")
  public @ResponseBody ResponseEntity<Void> deleteGenre(@PathVariable int id){
	try {
	  genreRepository.deleteById(id);
	  return ResponseEntity.ok().build();
	}catch (Exception e) {
	  return ResponseEntity.notFound().build();
	}
	  
  }
}